const express = require('express')
const app = express()
const cors = require('cors')
require('dotenv').config()
const bodyParser = require("body-parser");
const mongoose = require("mongoose");


app.use(cors())
app.use(express.static('public'))
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:true}));
mongoose.connect(process.env.MONGO_URI);

app.get('/', (req, res) => {
  res.sendFile(__dirname + '/views/index.html')
});

const listener = app.listen(process.env.PORT || 3000, () => {
  console.log('Your app is listening on port ' + listener.address().port)
})

//Define a schema for exercise entries
const exerciseSchema = new mongoose.Schema({
  user_id: {type: String, required: true},
  description: {type: String, required: true},
  duration: {type: Number, required: true},
  date: {type: Date, default: new Date()}
});

//Define user schema for usernames and IDs (ids autogenerated by mongodb)
const userSchema = new mongoose.Schema({
  username: {type: String, required: true}
});

//define models needed
const ExerciseModel = new mongoose.model("ExerciseModel", exerciseSchema);
const UserModel = new mongoose.model("UserModel", userSchema);

//Post route for creating new users
app.post("/api/users", (req,res) => {
  const { username } = req.body;

  //insert username into database
  const entryObj = {
    username: username
  };

  const newUser = new UserModel(entryObj);
  newUser.save();
  return res.json({ username: newUser.username, _id: newUser._id });
});

//Get route to return list of all users
app.get("/api/users", (req, res) => {
  UserModel.find({}).then((users) => {
    return res.json(users);
  }).catch((err) => console.log(err));
});

//Post route for adding exercises to a specified user
app.post("/api/users/:id/exercises", (req,res) => {
  //grab inputs from the user
  const { description, duration, date } = req.body;
  const user_id = req.params.id;
  
  let exerciseObj = {
    user_id: user_id,
    description: description,
    duration: duration
  }
  //if the user supplied a date, add it in - otherwise it'll default to current date.
  if ( date != "") {
    exerciseObj.date = date;
  }

  const newExercise = new ExerciseModel(exerciseObj);
  
  //find user by user_id for result reporting
  UserModel.findById(user_id).then((userFound) => {
    //save the model to the database
    newExercise.save();
    //send the results in a json
    res.json({
      _id: userFound._id,
      username: userFound.username,
      description: newExercise.description,
      duration: newExercise.duration,
      date: newExercise.date.toDateString()
    });
  }).catch((err) => {if (err) {console.error(err)}});
});

//Get route for retreiving a user's exercise logs
app.get("/api/users/:id/logs", (req,res) => {
  //capture id through parameters
  const user_id = req.params.id;
  let { from, to, limit } = req.query;

  limit = limit ? parseInt(limit) : limit;
  
  //set up object to handle filtering

  let filterObj = {user_id: user_id};

  //check if there is a to or from parameter
  if (to || from ) {
    filterObj.date = {};
    if (from) {
      filterObj.date["$gte"] = from;
    }
    if (to) {
      filterObj.date["$lte"] = to;
    }
  }

  UserModel.findById(user_id).then((userFound) => {
    //save username into a variable
    const userName = userFound.username;

    //find all the exercises through user_id using ExerciseModel
    ExerciseModel.find(filterObj).limit(limit).then((exercises) => {

      exercises = exercises.map((data) => {
        return {
          description: data.description,
          duration: data.duration,
          date: data.date.toDateString()
        }
      });

      //define an object with what we want to deliver back to the user
      const logsObj = {
        username: userName,
        count: exercises.length,
        _id: user_id,
        log: exercises
      };

      //send json back
      return res.json(logsObj);

    }).catch((err) => {if (err) {console.error(err)}});
  }).catch((err) => {if (err) {console.error(err)}});
});

